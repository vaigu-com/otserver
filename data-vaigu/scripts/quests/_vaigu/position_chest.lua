CHEST_NEVER_OPENED = -1
local forceUntradeability = {
	[43946] = true,
	[43947] = true,
	[43948] = true,
	[43949] = true,
	[43950] = true,
}

local function extractItemData(item)
	local id = item:getId()
	local count = item:getCount()
	local actionid = item:getActionId()

	if forceUntradeability[id] and actionid == 0 then
		actionid = 1000
	end
	return { id = id, count = count, aid = actionid }
end

local function extractBagItems(items)
	local result = {}
	for _, item in pairs(items) do
		if item:isContainer() then
			result[item:getId()] = extractBagItems(item:getItems())
		else
			result[#result + 1] = extractItemData(item)
		end
	end
	return result
end

local function generatePositionChestRewards(chest)
	local chestItems = chest:getItems()
	local addItems = extractBagItems(chestItems)

	local addItemsSize = TableSize(addItems) - CountNotAddableItems(addItems)

	local wrapId = nil
	if addItemsSize > 1 then
		wrapId = 2853
	end
	if addItemsSize > 8 then
		wrapId = 2854
	end
	if addItemsSize > 20 then
		wrapId = chest:getId()
	end

	if wrapId then
		addItems = { [wrapId] = addItems }
	end
	return addItems
end

local uidToCooldownIdentifier = {
	[0] = LOCKOUT_TIME.FOREVER,
	[1000] = LOCKOUT_TIME.DAILY,
	[2000] = LOCKOUT_TIME.WEEKLY,
}
local cooldownNeverExpires = os.time() * 2
local function calculateCooldownExpiryByIdentifier(cooldown)
	local cooldownExpiry = 0
	if uidToCooldownIdentifier[cooldown] then
		cooldown = uidToCooldownIdentifier[cooldown]
	end

	if cooldown == LOCKOUT_TIME.DAILY then
		cooldownExpiry = CalculateNextDayEpochTime()
	elseif cooldown == LOCKOUT_TIME.WEEKLY then
		cooldownExpiry = CalculateNextWednesdayEpochTime()
	elseif cooldown == LOCKOUT_TIME.FOREVER then
		return cooldownNeverExpires
	elseif type(cooldown) == "number" then
		return os.time() + cooldown * 3600
	else
		logger.error("[calculateCooldownExpiryByIdentifier] wrong cooldown type/hours")
	end
	return cooldownExpiry + ENCOUNTER_RESET_TIME_LOCAL * 3600
end

local function setChestWasOpened(player, chest)
	local cooldownIdentifier = chest:getUniqueId()
	local nextCooldownExpiry = calculateCooldownExpiryByIdentifier(cooldownIdentifier)

	local storage = chest:getPosition():ToNumber() -- ToDo: change to kv therefore storage key should be string and value can be string (enum)
	player:setStorageValue(storage, nextCooldownExpiry)
end

--[[
ToDo:
	allow set aid and uid 1 through 99 in rme // const.h 
		constexpr int MinUniqueId = 1000;
		constexpr int MaxUniqueId = 65535;
		constexpr int MinActionId = 100;
		constexpr int MaxActionId = 65535;

	new exp formula: actionid * 10 ^ uniqueid
	this allows to set exp to all numbers 0 through 65535 ad much higher precision at higher magnitudes
	custom behavior based on uniqueid: 
		10: exp granted is equal to actionId (this allows precision 1 through 65535)
		20: grants exp boost for seconds equal to actionid instead of granting experiece

]]
--
-- POSITIONCHEST_ACTION_ID is registered on cpp side;
-- use item id 130 (EXPloding cookie) to grant exp:
--	granted exp: actionid * count ^ 10
--	example1: count 3, actionid 123 gives 123 * 3^10 = 123000 experience
--	example2: count 1, actionid 0 gives 0 * 3^10 = 0 experience
--	example3: count 1, actionid 100 gives 100 * 1^10 = 1000 experience (lowest nonzero)
--	example4: count 100, actionid 65535 gives 65536 * 100^10 (highest possible)
--not suitable for quest items with a non-static actionid (eg.: generated by NextState())

local function isCooldownExpired(player, chest)
	local storage = chest:getPosition():ToNumber()
	return player:getStorageValue(storage) < os.time() -- ToDo: change to kv therefore storage key should be string and value can be string (enum)
end

-- Set chest uid to incur cooldown:
--	0: cooldown is forever (one-time use). This is used for most chests.
--	1000: cooldown expires next day, 5 AM
-- 	2000: cooldown expires next wednesday, 5 AM
-- 	other: cooldown expires when this many hours passed
local positionChest = Action()
function positionChest.onUse(player, chest, fromPosition, target, toPosition, isHotkey)
	if not isCooldownExpired(player, chest) then
		SendChestIsEmpty(player, chest:getId())
		return true
	end

	local rewards = generatePositionChestRewards(chest)
	if player:TryAddItems(rewards) then
		setChestWasOpened(player, chest)
		player:getPosition():sendMagicEffect(CONST_ME_STUN)
	end
	return true
end
positionChest:aid(Storage.PositionChest)
positionChest:register()
